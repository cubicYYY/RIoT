openapi: 3.0.0
servers:
  - url: 'http://petstore.swagger.io/v2'
info:
  description: >-
    RIoT is a high-performance IoT platform supporting basic authentication and MQTT protocol with way more features.
  version: 1.0.0
  title: RIoT - Rust Internet of Things
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
security:
  - api_key: []  # Default security requirement for the entire API
tags:
  - name: users
    description: User login/register
  - name: sites
    description: Site ops
  - name: devices
    description: Devices ops
  - name: mqtt
    description: MQTT instances management
  - name: ws
    description: WebSocket management
    
paths:
  /api/users/register:
    post:
      tags:
        - users
      summary: User registration
      description: ''
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
                - email
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request - Invalid user registration data
        '405':
          description: Invalid username / passwords / email
  /api/users/login:
    post:
      tags:
        - users
      summary: User login
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username
                password:
                  type: string
                  description: User's password, SHA256-hashed
              required:
                - username
                - password
      responses:
        '200':
          description: Successful login
          headers:
            Set-Cookie:
              description: Authentication token
              schema:
                type: string
        '401':
          description: Unauthorized - Invalid credentials
  /api/devices:
    get:
      summary: Get all devices
      tags:
        - device
      responses:
        '200':
          description: OK
  /api/devices/{device_id}:
    get:
      summary: Get device information
      tags:
        - device
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            $ref : '#/components/schemas/Device'
      responses:
        '200':
          description: OK
    put:
      summary: Update device information
      tags:
        - device
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '200':
          description: OK
    delete:
      summary: Delete device
      tags:
        - device
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '204':
          description: No Content
  /api/devices/{device_id}/records:
    get:
      summary: Get device records
      tags:
        - device
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '200':
          description: OK
    post:
      summary: Upload device records (JSON)
      tags:
        - device
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the device
      requestBody:
        description: Device records in JSON format
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Record'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request

  /api/sites:
    get:
      summary: Get all sites
      tags:
        - sites
      responses:
        '200':
          description: OK
  /api/sites/{site_id}:
    get:
      summary: Get site information
      tags:
        - sites
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the site
      responses:
        '200':
          description: OK
    put:
      summary: Update site information
      tags:
        - sites
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the site
      responses:
        '200':
          description: OK
  /api/sites/{site_id}/devices:
    get:
      summary: Get devices for a site
      tags:
        - sites
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the site
      responses:
        '200':
          description: OK
    post:
      summary: Add device to site
      tags:
        - sites
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the site
        - name: did
          in: query
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
    delete:
      summary: Remove device from site
      tags:
        - sites
      parameters:
        - name: site_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the site
        - name: did
          in: query
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '204':
          description: No Content

  /api/ws/{socket_type}:
    get:
      summary: Get WebSocket channel
      tags:
        - ws
      parameters:
        - name: socket_type
          in: path
          required: true
          schema:
            type: string
          description: Type of WebSocket channel
        - name: filters
          in: query
          schema:
            type: string
          description: Additional filters
      responses:
        '200':
          description: OK

  /api/mqtt/{device_id}:
    get:
      summary: Get MQTT subscription server
      tags:
        - mqtt
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '200':
          description: OK
    delete:
      summary: Unsubscribe from MQTT server
      tags:
        - mqtt
      parameters:
        - name: device_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the device
      responses:
        '204':
          description: No Content
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: XApiKey
      in: header
  schemas:
    User:
      title: a User
      description: A User who is to own some devices/sites
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
          description: SHA256-hashed
        activated:
          type: boolean
          default: false
        privilege:
          type: integer
          format: int32
          description: User Status, enum
        since:
          type: integer
          format: int64
          description: UNIX timestamp by seconds
      xml:
        name: User
    Device:
      title: a Device
      description: A Device(Sensor) which yields data
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        uid:
          $ref: '#/components/schemas/User'
        name:
          type: string
          example: my_device_name
        desc:
          type: string
          example: This is a device.
        type:
          type: string
          description: device type identifier
        since:
          type: integer
          format: int64
          description: UNIX timestamp by seconds, created at
        last_update:
          type: integer
          format: int64
          description: UNIX timestamp by seconds, updated at
      xml:
        name: Device
    Site:
      title: a Site
      description: A Device(Sensor) group own by a single user
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        uid:
          $ref: '#/components/schemas/User'
        name:
          type: string
          example: my_site_name
        desc:
          type: string
          example: This is a site.
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
      xml:
        name: Site
    Record:
      title: sensor data
      description: a Record that uploaded by a Device
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int32
        did:
          $ref: '#/components/schemas/Device'
        payload:
          type: string
          format: byte
          description: MQTT raw byte payload or JSON in ASCII.
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        timestamp:
          type: integer
          format: int64
          description: UNIX timestamp by milliseconds
      xml:
        name: Record
    Owns:
      title: an Ownership
      description: a relationship between a site & a device
      type: object
      required:
        - sid
        - did
      properties:
        sid:
          $ref: '#/components/schemas/Site'
        did:
          $ref: '#/components/schemas/Device'
      xml:
        name: Owns
    